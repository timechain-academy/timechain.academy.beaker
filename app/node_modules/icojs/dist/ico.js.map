{"version":3,"file":"ico.js","sources":["../src/mime.js","../src/browser/image.js","../node_modules/to-data-view/index.js","../src/is-ico.js","../node_modules/decode-bmp/index.js","../node_modules/decode-ico/index.js","../src/parse/index.js","../src/browser/index.js"],"sourcesContent":["'use strict';\n\nconst MIME_BMP = 'image/bmp';\nconst MIME_JPEG = 'image/jpeg';\nconst MIME_PNG = 'image/png';\n\nmodule.exports = {\n  MIME_BMP,\n  MIME_JPEG,\n  MIME_PNG\n};\n\n","'use strict';\n\nconst { MIME_PNG } = require('../mime');\n\nconst dataURLToArrayBuffer = dataURL => {\n  const string = atob(dataURL.replace(/.+,/u, ''));\n  const view = new Uint8Array(string.length);\n  for (let i = 0; i < string.length; i++) {\n    view[i] = string.charCodeAt(i);\n  }\n  return view.buffer;\n};\n\nconst Image = {\n  /**\n   * Create imageData from image.\n   *\n   * @access private\n   * @param {ArrayBuffer} arrayBuffer - Image buffer.\n   * @returns {ImageData} ImageData.\n   */\n  decode (arrayBuffer) {\n    return new Promise(resolve => {\n      // eslint-disable-next-line node/no-unsupported-features/node-builtins\n      const url = URL.createObjectURL(new Blob([arrayBuffer]));\n      const img = document.createElement('img');\n      img.src = url;\n      img.onload = () => {\n        const { naturalHeight: height, naturalWidth: width } = img;\n        const canvas = document.createElement('canvas');\n        canvas.width = width;\n        canvas.height = height;\n        const ctx = canvas.getContext('2d');\n        ctx.drawImage(img, 0, 0);\n        const { data } = ctx.getImageData(0, 0, width, height);\n        resolve({\n          data,\n          height,\n          width\n        });\n      };\n    });\n  },\n  /**\n   * Create image from imgData.data.\n   *\n   * @access private\n   * @param {Object} image - Data.\n   * @param {number} image.width - Image width.\n   * @param {number} image.height - Image height.\n   * @param {Uint8ClampedArray} image.data - Same as imageData.data.\n   * @param {string} [mime=image/png] - MIME type.\n   * @returns {ArrayBuffer} Image.\n   */\n  encode (image, mime = MIME_PNG) {\n    return new Promise(resolve => {\n      const { data, height, width } = image;\n      const canvas = document.createElement('canvas');\n      canvas.width = width;\n      canvas.height = height;\n      const ctx = canvas.getContext('2d');\n      const imageData = ctx.createImageData(width, height);\n      const dataData = imageData.data;\n      for (let i = 0; i < dataData.length; i++) {\n        dataData[i] = data[i];\n      }\n      ctx.putImageData(imageData, 0, 0);\n      resolve(dataURLToArrayBuffer(canvas.toDataURL(mime)));\n    });\n  }\n};\n\nmodule.exports = Image;\n","module.exports = function toDataView (data) {\n  if (data instanceof Uint8Array) {\n    return new DataView(data.buffer, data.byteOffset, data.byteLength)\n  }\n\n  if (data instanceof ArrayBuffer) {\n    return new DataView(data)\n  }\n\n  throw new TypeError('Expected `data` to be an ArrayBuffer or Uint8Array')\n}\n","'use strict';\n\nconst toDataView = require('to-data-view');\n\n/**\n * Check the ArrayBuffer is valid ICO.\n *\n * @alias module:ICO\n * @param {ArrayBuffer|Buffer} source - ICO file data.\n * @returns {boolean} True if arg is ICO.\n */\nconst isICO = source => {\n  const dataView = toDataView(source);\n  return dataView.getUint16(0, true) === 0 && dataView.getUint16(2, true) === 1;\n};\n\nmodule.exports = isICO;\n","const toDataView = require('to-data-view')\n\nfunction makeDivisibleByFour (input) {\n  const rest = input % 4\n\n  return rest ? input + 4 - rest : input\n}\n\nclass Bitmap {\n  constructor (data, offset, { width, height, colorDepth, format }) {\n    this.format = format\n    this.offset = offset\n    this.depth = colorDepth\n    this.stride = makeDivisibleByFour(width * this.depth / 8)\n    this.size = (this.stride * height)\n    this.data = data.slice(this.offset, this.offset + this.size)\n\n    if (this.size !== this.data.byteLength) {\n      throw new Error('Truncated bitmap data')\n    }\n  }\n\n  get (x, y, channel) {\n    const idx = this.format.indexOf(channel)\n\n    if (this.depth === 1) {\n      const slice = this.data[(y * this.stride) + (x / 8 | 0)]\n      const mask = 1 << (7 - (x % 8) * 1)\n\n      return (slice & mask) >> (7 - (x % 8) * 1)\n    }\n\n    if (this.depth === 2) {\n      const slice = this.data[(y * this.stride) + (x / 4 | 0)]\n      const mask = 3 << (6 - (x % 4) * 2)\n\n      return (slice & mask) >>> (6 - (x % 4) * 2)\n    }\n\n    if (this.depth === 4) {\n      const slice = this.data[(y * this.stride) + (x / 2 | 0)]\n      const mask = 15 << (4 - (x % 2) * 4)\n\n      return (slice & mask) >>> (4 - (x % 2) * 4)\n    }\n\n    return this.data[(y * this.stride) + (x * (this.depth / 8)) + idx]\n  }\n}\n\nfunction decodeTrueColorBmp (data, { width, height, colorDepth, icon }) {\n  if (colorDepth !== 32 && colorDepth !== 24) {\n    throw new Error(`A color depth of ${colorDepth} is not supported`)\n  }\n\n  const xor = new Bitmap(data, 0, { width, height, colorDepth, format: 'BGRA' })\n  const and = (colorDepth === 24 && icon)\n    ? new Bitmap(data, xor.offset + xor.size, { width, height, colorDepth: 1, format: 'A' })\n    : null\n\n  const result = new Uint8Array(width * height * 4)\n\n  let idx = 0\n  for (let y = 0; y < height; y++) {\n    for (let x = 0; x < width; x++) {\n      result[idx++] = xor.get(x, height - y - 1, 'R')\n      result[idx++] = xor.get(x, height - y - 1, 'G')\n      result[idx++] = xor.get(x, height - y - 1, 'B')\n\n      if (colorDepth === 32) {\n        result[idx++] = xor.get(x, height - y - 1, 'A')\n      } else {\n        result[idx++] = and && and.get(x, height - y - 1, 'A') ? 0 : 255\n      }\n    }\n  }\n\n  return result\n}\n\nfunction decodePaletteBmp (data, { width, height, colorDepth, colorCount, icon }) {\n  if (colorDepth !== 8 && colorDepth !== 4 && colorDepth !== 2 && colorDepth !== 1) {\n    throw new Error(`A color depth of ${colorDepth} is not supported`)\n  }\n\n  const colors = new Bitmap(data, 0, { width: colorCount, height: 1, colorDepth: 32, format: 'BGRA' })\n  const xor = new Bitmap(data, colors.offset + colors.size, { width, height, colorDepth, format: 'C' })\n  const and = icon ? new Bitmap(data, xor.offset + xor.size, { width, height, colorDepth: 1, format: 'A' }) : null\n\n  const result = new Uint8Array(width * height * 4)\n\n  let idx = 0\n  for (let y = 0; y < height; y++) {\n    for (let x = 0; x < width; x++) {\n      const colorIndex = xor.get(x, height - y - 1, 'C')\n\n      result[idx++] = colors.get(colorIndex, 0, 'R')\n      result[idx++] = colors.get(colorIndex, 0, 'G')\n      result[idx++] = colors.get(colorIndex, 0, 'B')\n      result[idx++] = and && and.get(x, height - y - 1, 'A') ? 0 : 255\n    }\n  }\n\n  return result\n}\n\nfunction checkMagicBytes (bytes) {\n  if (bytes !== 0x4D42) throw new Error(`Invalid magic byte 0x${bytes.toString(16)}`)\n}\n\nmodule.exports = function decodeBmp (source, { width: iconWidth = 0, height: iconHeight = 0, icon = false } = {}) {\n  const data = toDataView(source)\n\n  let headerSize\n  let bitmapWidth\n  let bitmapHeight\n  let colorDepth\n  let colorCount\n\n  if (icon) {\n    headerSize = data.getUint32(0, true)\n    bitmapWidth = (data.getUint32(4, true) / 1) | 0\n    bitmapHeight = (data.getUint32(8, true) / 2) | 0\n    colorDepth = data.getUint16(14, true)\n    colorCount = data.getUint32(32, true)\n  } else {\n    checkMagicBytes(data.getUint16(0, true))\n    headerSize = 14 + data.getUint32(14, true)\n    bitmapWidth = data.getUint32(18, true)\n    bitmapHeight = data.getUint32(22, true)\n    colorDepth = data.getUint16(28, true)\n    colorCount = data.getUint32(46, true)\n  }\n\n  if (colorCount === 0 && colorDepth <= 8) {\n    colorCount = (1 << colorDepth)\n  }\n\n  const width = (bitmapWidth === 0 ? iconWidth : bitmapWidth)\n  const height = (bitmapHeight === 0 ? iconHeight : bitmapHeight)\n\n  const bitmapData = new Uint8Array(data.buffer, data.byteOffset + headerSize, data.byteLength - headerSize)\n\n  const result = colorCount\n    ? decodePaletteBmp(bitmapData, { width, height, colorDepth, colorCount, icon })\n    : decodeTrueColorBmp(bitmapData, { width, height, colorDepth, icon })\n\n  return { width, height, data: result, colorDepth }\n}\n","const toDataView = require('to-data-view')\nconst decodeBmp = require('decode-bmp')\n\nfunction isPng (view, offset) {\n  return (view.getUint32(offset + 0) === 0x89504e47 && view.getUint32(offset + 4) === 0x0d0a1a0a)\n}\n\nfunction pngBitsPerPixel (view, offset) {\n  const bitDepth = view.getUint8(offset + 24)\n  const colorType = view.getUint8(offset + 25)\n\n  if (colorType === 0) return bitDepth * 1\n  if (colorType === 2) return bitDepth * 3\n  if (colorType === 3) return bitDepth * 1\n  if (colorType === 4) return bitDepth * 2\n  if (colorType === 6) return bitDepth * 4\n\n  throw new Error('Invalid PNG colorType')\n}\n\nfunction pngWidth (view, offset) {\n  return view.getUint32(offset + 16, false)\n}\n\nfunction pngHeight (view, offset) {\n  return view.getUint32(offset + 20, false)\n}\n\nmodule.exports = function decodeIco (input) {\n  const view = toDataView(input)\n\n  if (view.byteLength < 6) {\n    throw new Error('Truncated header')\n  }\n\n  if (view.getUint16(0, true) !== 0) {\n    throw new Error('Invalid magic bytes')\n  }\n\n  const type = view.getUint16(2, true)\n\n  if (type !== 1 && type !== 2) {\n    throw new Error('Invalid image type')\n  }\n\n  const length = view.getUint16(4, true)\n\n  if (view.byteLength < 6 + (16 * length)) {\n    throw new Error('Truncated image list')\n  }\n\n  return Array.from({ length }, (_, idx) => {\n    const width = view.getUint8(6 + (16 * idx) + 0)\n    const height = view.getUint8(6 + (16 * idx) + 1)\n    const size = view.getUint32(6 + (16 * idx) + 8, true)\n    const offset = view.getUint32(6 + (16 * idx) + 12, true)\n\n    const hotspot = (type !== 2 ? null : {\n      x: view.getUint16(6 + (16 * idx) + 4, true),\n      y: view.getUint16(6 + (16 * idx) + 6, true)\n    })\n\n    if (isPng(view, offset)) {\n      return {\n        bpp: pngBitsPerPixel(view, offset),\n        data: new Uint8Array(view.buffer, view.byteOffset + offset, size),\n        height: pngHeight(view, offset),\n        hotspot,\n        type: 'png',\n        width: pngWidth(view, offset)\n      }\n    }\n\n    const data = new Uint8Array(view.buffer, view.byteOffset + offset, size)\n    const bmp = decodeBmp(data, { width, height, icon: true })\n\n    return {\n      bpp: bmp.colorDepth,\n      data: bmp.data,\n      height: bmp.height,\n      hotspot,\n      type: 'bmp',\n      width: bmp.width\n    }\n  })\n}\n","'use strict';\n\nconst decodeIco = require('decode-ico');\nconst { MIME_PNG } = require('../mime');\n\n/**\n * @typedef {Object} ParsedImage\n * @property {Number} width Image width.\n * @property {Number} height Image height.\n * @property {Number} bpp Image color depth as bits per pixel.\n * @property {ArrayBuffer} buffer Image buffer.\n */\n\n/**\n * Parse ICO and return some image object.\n *\n * @access private\n * @param {ArrayBuffer|Buffer} data - ICO file data.\n * @param {string} mime - MIME type for output.\n * @param {Object} Image - Image encoder/decoder.\n * @returns {Promise<ParsedImage[]>} Resolves to an array of {@link ParsedImage}.\n */\nconst parse = (data, mime, Image) => {\n  let icons = null;\n\n  try {\n    icons = decodeIco(data);\n  } catch (err) {\n    return Promise.reject(err);\n  }\n\n  const decodePng = icon => {\n    if (icon.type !== 'png') {\n      return Promise.resolve(icon);\n    }\n\n    return Image.decode(icon.data).then(decoded => Object.assign(icon, {\n      data: decoded.data,\n      type: 'bmp'\n    }));\n  };\n\n  const encodeImage = icon => Image.encode(icon, mime).then(encoded => Object.assign(icon, {\n    buffer: encoded,\n    type: mime.replace('image/', '')\n  }));\n\n  const transcodeImage = icon => {\n    if (mime === MIME_PNG && icon.type === 'png') {\n      return Promise.resolve(Object.assign({ buffer: icon.data.buffer.slice(icon.data.byteOffset, icon.data.byteOffset + icon.data.byteLength) }, icon));\n    }\n    return decodePng(icon).then(encodeImage);\n  };\n\n  return Promise.all(icons.map(transcodeImage));\n};\n\nmodule.exports = parse;\n","'use strict';\n\nconst Image = require('./image');\nconst isICO = require('../is-ico');\nconst parseICO = require('../parse');\nconst { MIME_PNG } = require('../mime');\n\nconst parse = (arrayBuffer, mime = MIME_PNG) => parseICO(arrayBuffer, mime, Image);\n\nconst ICO = {\n  isICO,\n  parse\n};\n\nmodule.exports = ICO;\n"],"names":["MIME_BMP","MIME_JPEG","MIME_PNG","require$$0","Image","decode","arrayBuffer","Promise","resolve","url","URL","createObjectURL","Blob","img","document","createElement","src","onload","height","naturalHeight","width","naturalWidth","canvas","ctx","getContext","drawImage","data","getImageData","encode","image","mime","imageData","createImageData","dataData","i","length","putImageData","dataURL","string","atob","replace","view","Uint8Array","charCodeAt","buffer","dataURLToArrayBuffer","toDataURL","module","DataView","byteOffset","byteLength","ArrayBuffer","TypeError","source","dataView","toDataView","getUint16","Bitmap","offset","input","rest","colorDepth","format","depth","stride","this","size","slice","Error","x","y","channel","idx","indexOf","headerSize","bitmapWidth","bitmapHeight","colorCount","iconWidth","iconHeight","icon","getUint32","bytes","toString","checkMagicBytes","bitmapData","colors","xor","and","result","colorIndex","get","decodePaletteBmp","decodeTrueColorBmp","type","Array","from","_","getUint8","hotspot","bpp","bitDepth","colorType","pngBitsPerPixel","bmp","decodeBmp","icons","decodeIco","err","reject","encodeImage","then","encoded","Object","assign","all","map","decoded","isICO","parse","parseICO"],"mappings":"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"}